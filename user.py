import pickle
import uuid


class Usurper:
    """
    handles the retrieval and creation of individual 'chirp' messages in birdyboard.py.
    Methods: deserialize_chirps, generate_new_chirp, serialize_chirps, chirp_search.
    """

    def __init__(self):
        self.user_library = {}

    def deserialize_users(self):
        """
        opens users.txt file. handles what happens if there are no users.
        """
        try:
            with open('users.txt', 'rb') as users:
                self.user_library = pickle.load(users)
        except FileNotFoundError:
                self.user_library = {"sample_key": {"user_name": "a_user_id", "real_name": "sample name"}}
        except EOFError:
                self.user_library = {"sample_key": {"user_name": "a_user_id", "real_name": "sample name"}}
        finally:
            pass

    def generate_new_user(self, user_name, real_name):
        """
        adds a new user to the user library. Returns a unique key value for the new user so it can be added to its associated conversation. Runs deserialization and serialization functions.
        Arguments: 1. username string text, 2. string text for real name.
        """
        user_key = str(uuid.uuid4())

        self.deserialize_users()
        self.user_library[user_key] = {"user_name": user_name, "real_name": real_name}
        self.serialize_users()

        return user_key

    def serialize_users(self):
        """
        saves new users to the users.txt file.
        Arguments: none
        """
        with open("users.txt", "wb+") as users:
            pickle.dump(self.user_library, users)

    def user_search(self, unique_user_id):
        """
        receives a unique user ID and iterates through self.user_library to see if there's a key match. Returns the value of the matching key.
        Arguments: a unique key (generated by UID).
        """
        try:
            return self.user_library[unique_user_id]
        except KeyError:
            return None
        finally:
            pass
