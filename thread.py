import pickle
import uuid


class Threader:
    """
    handles the retrieval and creation of chirp threads(lists of chirps) in birdyboard.py.
    Methods: deserialize_threads, generate_new_thread, serialize_threads, thread_search
    """

    def __init__(self):
        self.thread_library = {}

    def deserialize_threads(self):
        """
        opens threads.txt file. handles what happens if there are no threads.
        """
        try:
            with open('threads.txt', 'rb') as threads:
                self.thread_library = pickle.load(threads)
        except FileNotFoundError:
                self.thread_library = {"sample_key": {"title": "sample title", "public": True, "chirps": []}}
        except EOFError:
                self.thread_library = {"sample_key": {"title": "sample title", "public": True, "chirps": []}}
        finally:
            pass

    def generate_new_thread(self, title, user_ids=None):
        """
        generates a new public or private thread with a title and an empty chirp list. if a tuple of allowed user ids is passed as the second argument to this function, the thread is set to private and an allowed_users key is added. I bet eventually I could combine those two values ("if allowed_users exists, the thread is private") but this is more readable for me for right now.
        Returns the ID of the new thread so birdyboard can do something new with it.
        Arguments: 1. title of new thread. 2. (optional, used for private threads) Tuple with string ids of allowed users.
        """
        thread_key = str(uuid.uuid4())

        self.deserialize_threads()
        self.thread_library[thread_key] = {"title": title, "public": True, "chirps": []}
        if user_ids is not None:
            self.thread_library[thread_key]["public"] = False
            self.thread_library[thread_key]["allowed_users"] = user_ids
        self.serialize_threads()

        return thread_key

    def serialize_threads(self):
        """
        saves new threads to the threads.txt file.
        Arguments: none
        """
        with open("threads.txt", "wb+") as threads:
            pickle.dump(self.thread_library, threads)

    def thread_search(self, unique_thread_id):
        """
        receives a unique thread ID and iterates through self.thread_library to see if there's a key match. Returns the value of the matching key.
        Arguments: a unique key (generated by UUID).
        """
        try:
            return self.thread_library[unique_thread_id]
        except IndexError:
            return None
        finally:
            pass
